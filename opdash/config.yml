---
  # Quick place to check current environment
- ENVIRONMENT: local

  # Env variable to use when looking for an additional configuration
  # EX: use export OPDASH_CP_CONFIG="/some/path/to/file.yml"
- CONFIG_OVERRIDE_ENV_VAR: OPDASH_CP_CONFIG

  # Location where the migrator service is running
- API:
    BASE_URL: http://opdash-api-dev.us-east-1.elasticbeanstalk.com
    # Timeout length for calls to the API (in seconds)
    PROXY_TIMEOUT: 15

#- IDENTITY_URL: https://identity-internal.api.rackspacecloud.com/v2.0
- IDENTITY_URL: https://identity-internal.api.rackspacecloud.com/v2.0

- SAML:
    ENABLED: False
    CONFIG_PATH: ./opdash/saml_config.json

- PILOT:
    URL: https://prod.pilot.api.rackspacecloud.com/v1/
    PRODUCT: ''  # we don't have a product in the menu yet
    MYCLOUD_URL: https://mycloud.rackspace.com
    LOGOUT_URL: /logout

- AWS:
    # AWS Credentials
    # ACCESS_KEY_ID:
    # SECRET_ACCESS_KEY:

- CACHE:
    # Cache types available: filesystem, redis
    TYPE: filesystem

    # If using filesystem:
    DIR: ./session

    # If using Redis for Caching:
    # REDIS_HOST: 0.0.0.0
    # KEY_PREFIX: opdash-session

# Flask specific configuration items.
# For more information see:
# http://flask.pocoo.org/docs/0.12/config/#builtin-configuration-values
- FLASK:
    HOST: 0.0.0.0
    PORT: 8000
    DEBUG: True
    USE_RELOADER: True

# If you want to encrypt your config file:
# run python with the current app in path then run:
# opdash_cp.encryption_helper.encrypt_file({key}, {file}[, {out_file}])
# where "key" is the encryption file and "file" is
# the input file. Optionally an output file can be specified.

# To decrypt a file use:
# opdash_api.encryption_helper.decrypt_file({key}, {file}[, {out_file}]).
- ENCRYPTION:
    # Environment variable key used when looking for the decryption key
    # to decrypt an encrypted configuration during local development.
    CONFIG_LOCAL_KEY: DECRYPT_KEY
